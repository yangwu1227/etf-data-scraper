AWSTemplateFormatVersion: "2010-09-09"
Description: A VPC setup with two private subnets across two AZ's, NAT gateways, and a security group allowing all outbound traffic.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16 # IPv4 CIDR range for the VPC, 65,536 IP addresses
      EnableDnsSupport: true 
      EnableDnsHostnames: true 
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}_vpc

  # Create an internet gateway and attach it to the VPC ------------------------------------------------------------------------------

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}_igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public and private subnets across two AZ's ----------------------------------------------------------------------------------------

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24 # Smaller range with 256 IP addresses
      MapPublicIpOnLaunch: true
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}_public_subnet_1

  PublicSubnet2:
    Type: AWS::EC2::Subnet 
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24 # Smaller range with 256 IP addresses
      MapPublicIpOnLaunch: true
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}_public_subnet_2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24 # Smaller range with 256 IP addresses
      MapPublicIpOnLaunch: false
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}_private_subnet_1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet 
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24 # Smaller range with 256 IP addresses
      MapPublicIpOnLaunch: false
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}_private_subnet_2

  # Route table for the public subnet and a route to the internet gateway ------------------------------------------------------------

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}_public_rtb

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0 # All IPv4 addresses
      GatewayId: !Ref InternetGateway

  # Set up NAT gateways in the public subnets ----------------------------------------------------------------------------------------

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId:
        Fn::GetAtt:
          - EIP1
          - AllocationId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}_nat_1

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      AllocationId:
        Fn::GetAtt:
          - EIP2
          - AllocationId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}_nat_2

  # Elastic IPs for the NAT gateways -------------------------------------------------------------------------------------------------

  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Route tables for the private subnets and routes to the NAT gateways ----------------------------------------------------------------

  RouteTablePrivate1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}_private_rtb_1

  RouteTablePrivate2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}_private_rtb_2

  # Route outbound traffic from the private subnets to the NAT gateways ----------------------------------------------------------------

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate1
      DestinationCidrBlock: 0.0.0.0/0 # All IPv4 addresses
      NatGatewayId: !Ref NATGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate2
      DestinationCidrBlock: 0.0.0.0/0 # All IPv4 addresses
      NatGatewayId: !Ref NATGateway2

  # Associate the subnets with the route tables ----------------------------------------------------------------------------------------

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTablePublic

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTablePublic

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref RouteTablePrivate1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref RouteTablePrivate2

  # Security group allowing all outbound traffic --------------------------------------------------------------------------------------

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow outbound traffic for ETF scraper application
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1  
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}_sg

Outputs: # Export the VPC ID, private subnet IDs, and security group ID for other stacks downstream to use

  PrivateSubnet1Id:
    Description: ID of the first private subnet
    Value: !Ref PrivateSubnet1

  PrivateSubnet2Id:
    Description: ID of the second private subnet
    Value: !Ref PrivateSubnet2

  SecurityGroupId:
    Description: ID of the security group
    Value: !Ref SecurityGroup
